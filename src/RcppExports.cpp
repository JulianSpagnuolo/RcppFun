// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// bunny_sim
DataFrame bunny_sim(int maxit, StringMatrix nameslist);
RcppExport SEXP _RcppFun_bunny_sim(SEXP maxitSEXP, SEXP nameslistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< StringMatrix >::type nameslist(nameslistSEXP);
    rcpp_result_gen = Rcpp::wrap(bunny_sim(maxit, nameslist));
    return rcpp_result_gen;
END_RCPP
}
// grading
String grading(double x);
RcppExport SEXP _RcppFun_grading(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(grading(x));
    return rcpp_result_gen;
END_RCPP
}
// cola
Rcpp::String cola();
RcppExport SEXP _RcppFun_cola() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cola());
    return rcpp_result_gen;
END_RCPP
}
// gullible
NumericVector gullible();
RcppExport SEXP _RcppFun_gullible() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gullible());
    return rcpp_result_gen;
END_RCPP
}
// pancake
void pancake(IntegerVector eaten);
RcppExport SEXP _RcppFun_pancake(SEXP eatenSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type eaten(eatenSEXP);
    pancake(eaten);
    return R_NilValue;
END_RCPP
}
// bracket
void bracket(bool master);
RcppExport SEXP _RcppFun_bracket(SEXP masterSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type master(masterSEXP);
    bracket(master);
    return R_NilValue;
END_RCPP
}
// tictactoe
void tictactoe(bool TwoPlayer);
RcppExport SEXP _RcppFun_tictactoe(SEXP TwoPlayerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type TwoPlayer(TwoPlayerSEXP);
    tictactoe(TwoPlayer);
    return R_NilValue;
END_RCPP
}
// dungeon
void dungeon();
RcppExport SEXP _RcppFun_dungeon() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    dungeon();
    return R_NilValue;
END_RCPP
}
// funfunc
void funfunc(int x, int y, int z);
RcppExport SEXP _RcppFun_funfunc(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    funfunc(x, y, z);
    return R_NilValue;
END_RCPP
}
// string_betrayal
NumericVector string_betrayal(NumericVector x);
RcppExport SEXP _RcppFun_string_betrayal(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(string_betrayal(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppFun_bunny_sim", (DL_FUNC) &_RcppFun_bunny_sim, 2},
    {"_RcppFun_grading", (DL_FUNC) &_RcppFun_grading, 1},
    {"_RcppFun_cola", (DL_FUNC) &_RcppFun_cola, 0},
    {"_RcppFun_gullible", (DL_FUNC) &_RcppFun_gullible, 0},
    {"_RcppFun_pancake", (DL_FUNC) &_RcppFun_pancake, 1},
    {"_RcppFun_bracket", (DL_FUNC) &_RcppFun_bracket, 1},
    {"_RcppFun_tictactoe", (DL_FUNC) &_RcppFun_tictactoe, 1},
    {"_RcppFun_dungeon", (DL_FUNC) &_RcppFun_dungeon, 0},
    {"_RcppFun_funfunc", (DL_FUNC) &_RcppFun_funfunc, 3},
    {"_RcppFun_string_betrayal", (DL_FUNC) &_RcppFun_string_betrayal, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppFun(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
